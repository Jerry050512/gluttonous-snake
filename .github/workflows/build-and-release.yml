name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up build tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y build-essential

      - name: Compile for Linux
        if: matrix.os == 'ubuntu-latest'
        run: gcc *.c -o game

      - name: Set up build tools
        if: matrix.os == 'windows-latest'
        run: choco install mingw

      - name: Compile for Windows
        if: matrix.os == 'windows-latest'
        run: |
          mingw32-gcc *.c -o game.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-build
          path: ${{ matrix.os == 'ubuntu-latest' && 'game' || 'game.exe' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Linux build
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-build
          path: .

      - name: Download Windows build
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-build
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./game
          asset_name: game
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./game.exe
          asset_name: game.exe
          asset_content_type: application/octet-stream
